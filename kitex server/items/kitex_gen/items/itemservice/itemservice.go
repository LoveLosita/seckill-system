// Code generated by Kitex v0.12.3. DO NOT EDIT.

package itemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	items "kitex-server/items/kitex_gen/items"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"get_item_info": kitex.NewMethodInfo(
		getItemInfoHandler,
		newItemServiceGetItemInfoArgs,
		newItemServiceGetItemInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"get_item_list": kitex.NewMethodInfo(
		getItemListHandler,
		newItemServiceGetItemListArgs,
		newItemServiceGetItemListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"add_item": kitex.NewMethodInfo(
		addItemHandler,
		newItemServiceAddItemArgs,
		newItemServiceAddItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"update_item": kitex.NewMethodInfo(
		updateItemHandler,
		newItemServiceUpdateItemArgs,
		newItemServiceUpdateItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"delete_item": kitex.NewMethodInfo(
		deleteItemHandler,
		newItemServiceDeleteItemArgs,
		newItemServiceDeleteItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	itemServiceServiceInfo                = NewServiceInfo()
	itemServiceServiceInfoForClient       = NewServiceInfoForClient()
	itemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return itemServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return itemServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return itemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ItemService"
	handlerType := (*items.ItemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "items",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func getItemInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*items.ItemServiceGetItemInfoArgs)
	realResult := result.(*items.ItemServiceGetItemInfoResult)
	success, err := handler.(items.ItemService).GetItemInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceGetItemInfoArgs() interface{} {
	return items.NewItemServiceGetItemInfoArgs()
}

func newItemServiceGetItemInfoResult() interface{} {
	return items.NewItemServiceGetItemInfoResult()
}

func getItemListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*items.ItemServiceGetItemListArgs)
	realResult := result.(*items.ItemServiceGetItemListResult)
	success, err := handler.(items.ItemService).GetItemList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceGetItemListArgs() interface{} {
	return items.NewItemServiceGetItemListArgs()
}

func newItemServiceGetItemListResult() interface{} {
	return items.NewItemServiceGetItemListResult()
}

func addItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*items.ItemServiceAddItemArgs)
	realResult := result.(*items.ItemServiceAddItemResult)
	success, err := handler.(items.ItemService).AddItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceAddItemArgs() interface{} {
	return items.NewItemServiceAddItemArgs()
}

func newItemServiceAddItemResult() interface{} {
	return items.NewItemServiceAddItemResult()
}

func updateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*items.ItemServiceUpdateItemArgs)
	realResult := result.(*items.ItemServiceUpdateItemResult)
	success, err := handler.(items.ItemService).UpdateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceUpdateItemArgs() interface{} {
	return items.NewItemServiceUpdateItemArgs()
}

func newItemServiceUpdateItemResult() interface{} {
	return items.NewItemServiceUpdateItemResult()
}

func deleteItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*items.ItemServiceDeleteItemArgs)
	realResult := result.(*items.ItemServiceDeleteItemResult)
	success, err := handler.(items.ItemService).DeleteItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceDeleteItemArgs() interface{} {
	return items.NewItemServiceDeleteItemArgs()
}

func newItemServiceDeleteItemResult() interface{} {
	return items.NewItemServiceDeleteItemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetItemInfo(ctx context.Context, req *items.GetItemInfoRequest) (r *items.GetItemInfoResponse, err error) {
	var _args items.ItemServiceGetItemInfoArgs
	_args.Req = req
	var _result items.ItemServiceGetItemInfoResult
	if err = p.c.Call(ctx, "get_item_info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetItemList(ctx context.Context, req *items.GetItemListRequest) (r *items.GetItemListResponse, err error) {
	var _args items.ItemServiceGetItemListArgs
	_args.Req = req
	var _result items.ItemServiceGetItemListResult
	if err = p.c.Call(ctx, "get_item_list", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddItem(ctx context.Context, req *items.AddItemRequest) (r *items.AddItemResponse, err error) {
	var _args items.ItemServiceAddItemArgs
	_args.Req = req
	var _result items.ItemServiceAddItemResult
	if err = p.c.Call(ctx, "add_item", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateItem(ctx context.Context, req *items.UpdateItemRequest) (r *items.UpdateItemResponse, err error) {
	var _args items.ItemServiceUpdateItemArgs
	_args.Req = req
	var _result items.ItemServiceUpdateItemResult
	if err = p.c.Call(ctx, "update_item", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteItem(ctx context.Context, req *items.DeleteItemRequest) (r *items.DeleteItemResponse, err error) {
	var _args items.ItemServiceDeleteItemArgs
	_args.Req = req
	var _result items.ItemServiceDeleteItemResult
	if err = p.c.Call(ctx, "delete_item", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
