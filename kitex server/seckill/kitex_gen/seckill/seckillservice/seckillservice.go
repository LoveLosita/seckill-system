// Code generated by Kitex v0.12.3. DO NOT EDIT.

package seckillservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	seckill "kitex-server/seckill/kitex_gen/seckill"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"sec_kill": kitex.NewMethodInfo(
		secKillHandler,
		newSecKillServiceSecKillArgs,
		newSecKillServiceSecKillResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"create_sec_kill": kitex.NewMethodInfo(
		createSecKillHandler,
		newSecKillServiceCreateSecKillArgs,
		newSecKillServiceCreateSecKillResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"get_order_status": kitex.NewMethodInfo(
		getOrderStatusHandler,
		newSecKillServiceGetOrderStatusArgs,
		newSecKillServiceGetOrderStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	secKillServiceServiceInfo                = NewServiceInfo()
	secKillServiceServiceInfoForClient       = NewServiceInfoForClient()
	secKillServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return secKillServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return secKillServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return secKillServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SecKillService"
	handlerType := (*seckill.SecKillService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "seckill",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func secKillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seckill.SecKillServiceSecKillArgs)
	realResult := result.(*seckill.SecKillServiceSecKillResult)
	success, err := handler.(seckill.SecKillService).SecKill(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSecKillServiceSecKillArgs() interface{} {
	return seckill.NewSecKillServiceSecKillArgs()
}

func newSecKillServiceSecKillResult() interface{} {
	return seckill.NewSecKillServiceSecKillResult()
}

func createSecKillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seckill.SecKillServiceCreateSecKillArgs)
	realResult := result.(*seckill.SecKillServiceCreateSecKillResult)
	success, err := handler.(seckill.SecKillService).CreateSecKill(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSecKillServiceCreateSecKillArgs() interface{} {
	return seckill.NewSecKillServiceCreateSecKillArgs()
}

func newSecKillServiceCreateSecKillResult() interface{} {
	return seckill.NewSecKillServiceCreateSecKillResult()
}

func getOrderStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seckill.SecKillServiceGetOrderStatusArgs)
	realResult := result.(*seckill.SecKillServiceGetOrderStatusResult)
	success, err := handler.(seckill.SecKillService).GetOrderStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSecKillServiceGetOrderStatusArgs() interface{} {
	return seckill.NewSecKillServiceGetOrderStatusArgs()
}

func newSecKillServiceGetOrderStatusResult() interface{} {
	return seckill.NewSecKillServiceGetOrderStatusResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SecKill(ctx context.Context, req *seckill.SecKillRequest) (r *seckill.SecKillResponse, err error) {
	var _args seckill.SecKillServiceSecKillArgs
	_args.Req = req
	var _result seckill.SecKillServiceSecKillResult
	if err = p.c.Call(ctx, "sec_kill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSecKill(ctx context.Context, req *seckill.CreateSecKillRequest) (r *seckill.CreateSecKillResponse, err error) {
	var _args seckill.SecKillServiceCreateSecKillArgs
	_args.Req = req
	var _result seckill.SecKillServiceCreateSecKillResult
	if err = p.c.Call(ctx, "create_sec_kill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderStatus(ctx context.Context, req *seckill.GetOrderStatusRequest) (r *seckill.GetOrderStatusResponse, err error) {
	var _args seckill.SecKillServiceGetOrderStatusArgs
	_args.Req = req
	var _result seckill.SecKillServiceGetOrderStatusResult
	if err = p.c.Call(ctx, "get_order_status", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
